# -*- coding: utf-8 -*-
"""Taller_n_19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18SBINJrU4cW5mNfxkDxJwTCmmCmAaGJ0
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress

x = np.array([1, 2, 3, 4, 5, 6, 7, 8], dtype=float)
y = np.array([1.2, 3.3, 3.8, 4.0, 4.2, 4.4, 4.5, 4.6], dtype=float)


b, a, r_value, _, _ = linregress(x, y)
r2_lineal = r_value**2
y_lineal = a + b*x

lny = np.log(y)
b_exp, a_exp, r_value_exp, _, _ = linregress(x, lny)
r2_exp = r_value_exp**2
alpha_exp = np.exp(a_exp)
beta_exp = b_exp
y_exp = alpha_exp * np.exp(beta_exp * x)


lnx = np.log(x)
lny = np.log(y)
b_pot, a_pot, r_value_pot, _, _ = linregress(lnx, lny)
r2_pot = r_value_pot**2
alpha_pot = np.exp(a_pot)
beta_pot = b_pot
y_pot = alpha_pot * (x ** beta_pot)

inv_y = 1/y
inv_x = 1/x
b_rc, a_rc, r_value_rc, _, _ = linregress(inv_x, inv_y)
r2_rc = r_value_rc**2
alpha_rc = 1 / a_rc
beta_rc = b_rc * alpha_rc
y_rc = (alpha_rc * x) / (beta_rc + x)


print("===== RESULTADOS DE LOS MODELOS =====")
print(f"Modelo Lineal:         y = {a:.4f} + {b:.4f}x    --> r² = {r2_lineal:.4f}")
print(f"Modelo Exponencial:    y = {alpha_exp:.4f} * e^({beta_exp:.4f}x)  --> r² = {r2_exp:.4f}")
print(f"Modelo de Potencias:   y = {alpha_pot:.4f} * x^{beta_pot:.4f}     --> r² = {r2_pot:.4f}")
print(f"Razón de Crecimiento:  y = ({alpha_rc:.4f}x) / ({beta_rc:.4f} + x) --> r² = {r2_rc:.4f}")

r2_values = {
    "Lineal": r2_lineal,
    "Exponencial": r2_exp,
    "Potencias": r2_pot,
    "Razón de Crecimiento": r2_rc
}
mejor_modelo = max(r2_values, key=r2_values.get)
print("\nEl modelo que mejor se ajusta a los datos es:", mejor_modelo)


plt.figure(figsize=(10, 6))
plt.scatter(x, y, color='black', label='Datos originales')
plt.plot(x, y_lineal, label=f'Lineal (r²={r2_lineal:.3f})')
plt.plot(x, y_exp, label=f'Exponencial (r²={r2_exp:.3f})')
plt.plot(x, y_pot, label=f'Potencias (r²={r2_pot:.3f})')
plt.plot(x, y_rc, label=f'Razón crecimiento (r²={r2_rc:.3f})')
plt.title('Comparación de Modelos de Regresión por Mínimos Cuadrados')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid(True)
plt.show()